package com.safetys.greenrobot.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.safetys.zatgov.bean.ReviewInfoGov;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REVIEW_INFO_GOV".
*/
public class ReviewInfoGovDao extends AbstractDao<ReviewInfoGov, Long> {

    public static final String TABLENAME = "REVIEW_INFO_GOV";

    /**
     * Properties of entity ReviewInfoGov.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DataId = new Property(0, Long.class, "dataId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property FcNum = new Property(2, String.class, "fcNum", false, "FC_NUM");
        public final static Property CompanyName = new Property(3, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property CleanUpTimeLimit = new Property(4, String.class, "cleanUpTimeLimit", false, "CLEAN_UP_TIME_LIMIT");
        public final static Property JcjlId = new Property(5, String.class, "jcjlId", false, "JCJL_ID");
        public final static Property CompanyId = new Property(6, String.class, "companyId", false, "COMPANY_ID");
        public final static Property HiddenNum = new Property(7, String.class, "hiddenNum", false, "HIDDEN_NUM");
    }


    public ReviewInfoGovDao(DaoConfig config) {
        super(config);
    }
    
    public ReviewInfoGovDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REVIEW_INFO_GOV\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dataId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"FC_NUM\" TEXT," + // 2: fcNum
                "\"COMPANY_NAME\" TEXT," + // 3: companyName
                "\"CLEAN_UP_TIME_LIMIT\" TEXT," + // 4: cleanUpTimeLimit
                "\"JCJL_ID\" TEXT," + // 5: jcjlId
                "\"COMPANY_ID\" TEXT," + // 6: companyId
                "\"HIDDEN_NUM\" TEXT);"); // 7: hiddenNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REVIEW_INFO_GOV\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReviewInfoGov entity) {
        stmt.clearBindings();
 
        Long dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(1, dataId);
        }
        stmt.bindLong(2, entity.getId());
 
        String fcNum = entity.getFcNum();
        if (fcNum != null) {
            stmt.bindString(3, fcNum);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(4, companyName);
        }
 
        String cleanUpTimeLimit = entity.getCleanUpTimeLimit();
        if (cleanUpTimeLimit != null) {
            stmt.bindString(5, cleanUpTimeLimit);
        }
 
        String jcjlId = entity.getJcjlId();
        if (jcjlId != null) {
            stmt.bindString(6, jcjlId);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(7, companyId);
        }
 
        String hiddenNum = entity.getHiddenNum();
        if (hiddenNum != null) {
            stmt.bindString(8, hiddenNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReviewInfoGov entity) {
        stmt.clearBindings();
 
        Long dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(1, dataId);
        }
        stmt.bindLong(2, entity.getId());
 
        String fcNum = entity.getFcNum();
        if (fcNum != null) {
            stmt.bindString(3, fcNum);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(4, companyName);
        }
 
        String cleanUpTimeLimit = entity.getCleanUpTimeLimit();
        if (cleanUpTimeLimit != null) {
            stmt.bindString(5, cleanUpTimeLimit);
        }
 
        String jcjlId = entity.getJcjlId();
        if (jcjlId != null) {
            stmt.bindString(6, jcjlId);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(7, companyId);
        }
 
        String hiddenNum = entity.getHiddenNum();
        if (hiddenNum != null) {
            stmt.bindString(8, hiddenNum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReviewInfoGov readEntity(Cursor cursor, int offset) {
        ReviewInfoGov entity = new ReviewInfoGov( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dataId
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fcNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // companyName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cleanUpTimeLimit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // jcjlId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // companyId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // hiddenNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReviewInfoGov entity, int offset) {
        entity.setDataId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setFcNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCleanUpTimeLimit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJcjlId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHiddenNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReviewInfoGov entity, long rowId) {
        entity.setDataId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReviewInfoGov entity) {
        if(entity != null) {
            return entity.getDataId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReviewInfoGov entity) {
        return entity.getDataId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
