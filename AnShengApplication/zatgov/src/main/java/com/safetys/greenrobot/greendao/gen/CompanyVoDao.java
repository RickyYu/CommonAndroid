package com.safetys.greenrobot.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.safetys.zatgov.bean.CompanyVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_VO".
*/
public class CompanyVoDao extends AbstractDao<CompanyVo, Long> {

    public static final String TABLENAME = "COMPANY_VO";

    /**
     * Properties of entity CompanyVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DataId = new Property(0, Long.class, "dataId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property CompanyName = new Property(2, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property FdDelegate = new Property(3, String.class, "fdDelegate", false, "FD_DELEGATE");
        public final static Property FirstArea = new Property(4, String.class, "firstArea", false, "FIRST_AREA");
        public final static Property SecondArea = new Property(5, String.class, "secondArea", false, "SECOND_AREA");
        public final static Property ThirdArea = new Property(6, String.class, "thirdArea", false, "THIRD_AREA");
        public final static Property X = new Property(7, String.class, "x", false, "X");
        public final static Property Y = new Property(8, String.class, "y", false, "Y");
        public final static Property DangerNum = new Property(9, String.class, "dangerNum", false, "DANGER_NUM");
        public final static Property GridDangerNum = new Property(10, String.class, "gridDangerNum", false, "GRID_DANGER_NUM");
        public final static Property AllDangerNum = new Property(11, String.class, "allDangerNum", false, "ALL_DANGER_NUM");
        public final static Property IsXiaofang = new Property(12, boolean.class, "isXiaofang", false, "IS_XIAOFANG");
        public final static Property IsAnjian = new Property(13, boolean.class, "isAnjian", false, "IS_ANJIAN");
        public final static Property Industry = new Property(14, String.class, "industry", false, "INDUSTRY");
        public final static Property IndustryName = new Property(15, String.class, "industryName", false, "INDUSTRY_NAME");
        public final static Property CompanyType = new Property(16, String.class, "companyType", false, "COMPANY_TYPE");
        public final static Property CompanyTypeName = new Property(17, String.class, "companyTypeName", false, "COMPANY_TYPE_NAME");
        public final static Property CreateTime = new Property(18, long.class, "createTime", false, "CREATE_TIME");
    }


    public CompanyVoDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_VO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dataId
                "\"ID\" TEXT," + // 1: id
                "\"COMPANY_NAME\" TEXT," + // 2: companyName
                "\"FD_DELEGATE\" TEXT," + // 3: fdDelegate
                "\"FIRST_AREA\" TEXT," + // 4: firstArea
                "\"SECOND_AREA\" TEXT," + // 5: secondArea
                "\"THIRD_AREA\" TEXT," + // 6: thirdArea
                "\"X\" TEXT," + // 7: x
                "\"Y\" TEXT," + // 8: y
                "\"DANGER_NUM\" TEXT," + // 9: dangerNum
                "\"GRID_DANGER_NUM\" TEXT," + // 10: gridDangerNum
                "\"ALL_DANGER_NUM\" TEXT," + // 11: allDangerNum
                "\"IS_XIAOFANG\" INTEGER NOT NULL ," + // 12: isXiaofang
                "\"IS_ANJIAN\" INTEGER NOT NULL ," + // 13: isAnjian
                "\"INDUSTRY\" TEXT," + // 14: industry
                "\"INDUSTRY_NAME\" TEXT," + // 15: industryName
                "\"COMPANY_TYPE\" TEXT," + // 16: companyType
                "\"COMPANY_TYPE_NAME\" TEXT," + // 17: companyTypeName
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 18: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyVo entity) {
        stmt.clearBindings();
 
        Long dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(1, dataId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(3, companyName);
        }
 
        String fdDelegate = entity.getFdDelegate();
        if (fdDelegate != null) {
            stmt.bindString(4, fdDelegate);
        }
 
        String firstArea = entity.getFirstArea();
        if (firstArea != null) {
            stmt.bindString(5, firstArea);
        }
 
        String secondArea = entity.getSecondArea();
        if (secondArea != null) {
            stmt.bindString(6, secondArea);
        }
 
        String thirdArea = entity.getThirdArea();
        if (thirdArea != null) {
            stmt.bindString(7, thirdArea);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(8, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(9, y);
        }
 
        String dangerNum = entity.getDangerNum();
        if (dangerNum != null) {
            stmt.bindString(10, dangerNum);
        }
 
        String gridDangerNum = entity.getGridDangerNum();
        if (gridDangerNum != null) {
            stmt.bindString(11, gridDangerNum);
        }
 
        String allDangerNum = entity.getAllDangerNum();
        if (allDangerNum != null) {
            stmt.bindString(12, allDangerNum);
        }
        stmt.bindLong(13, entity.getIsXiaofang() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsAnjian() ? 1L: 0L);
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(15, industry);
        }
 
        String industryName = entity.getIndustryName();
        if (industryName != null) {
            stmt.bindString(16, industryName);
        }
 
        String companyType = entity.getCompanyType();
        if (companyType != null) {
            stmt.bindString(17, companyType);
        }
 
        String companyTypeName = entity.getCompanyTypeName();
        if (companyTypeName != null) {
            stmt.bindString(18, companyTypeName);
        }
        stmt.bindLong(19, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyVo entity) {
        stmt.clearBindings();
 
        Long dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindLong(1, dataId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(3, companyName);
        }
 
        String fdDelegate = entity.getFdDelegate();
        if (fdDelegate != null) {
            stmt.bindString(4, fdDelegate);
        }
 
        String firstArea = entity.getFirstArea();
        if (firstArea != null) {
            stmt.bindString(5, firstArea);
        }
 
        String secondArea = entity.getSecondArea();
        if (secondArea != null) {
            stmt.bindString(6, secondArea);
        }
 
        String thirdArea = entity.getThirdArea();
        if (thirdArea != null) {
            stmt.bindString(7, thirdArea);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(8, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(9, y);
        }
 
        String dangerNum = entity.getDangerNum();
        if (dangerNum != null) {
            stmt.bindString(10, dangerNum);
        }
 
        String gridDangerNum = entity.getGridDangerNum();
        if (gridDangerNum != null) {
            stmt.bindString(11, gridDangerNum);
        }
 
        String allDangerNum = entity.getAllDangerNum();
        if (allDangerNum != null) {
            stmt.bindString(12, allDangerNum);
        }
        stmt.bindLong(13, entity.getIsXiaofang() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsAnjian() ? 1L: 0L);
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(15, industry);
        }
 
        String industryName = entity.getIndustryName();
        if (industryName != null) {
            stmt.bindString(16, industryName);
        }
 
        String companyType = entity.getCompanyType();
        if (companyType != null) {
            stmt.bindString(17, companyType);
        }
 
        String companyTypeName = entity.getCompanyTypeName();
        if (companyTypeName != null) {
            stmt.bindString(18, companyTypeName);
        }
        stmt.bindLong(19, entity.getCreateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyVo readEntity(Cursor cursor, int offset) {
        CompanyVo entity = new CompanyVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dataId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // companyName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fdDelegate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstArea
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // secondArea
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thirdArea
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // x
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // y
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dangerNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gridDangerNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // allDangerNum
            cursor.getShort(offset + 12) != 0, // isXiaofang
            cursor.getShort(offset + 13) != 0, // isAnjian
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // industry
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // industryName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // companyType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // companyTypeName
            cursor.getLong(offset + 18) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyVo entity, int offset) {
        entity.setDataId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFdDelegate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstArea(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSecondArea(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThirdArea(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setX(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setY(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDangerNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGridDangerNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAllDangerNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsXiaofang(cursor.getShort(offset + 12) != 0);
        entity.setIsAnjian(cursor.getShort(offset + 13) != 0);
        entity.setIndustry(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIndustryName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompanyType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCompanyTypeName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreateTime(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyVo entity, long rowId) {
        entity.setDataId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyVo entity) {
        if(entity != null) {
            return entity.getDataId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyVo entity) {
        return entity.getDataId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
